### 一、MySql体系

<img src="C:\Users\admin\AppData\Roaming\Typora\typora-user-images\000001.jpg" style="zoom:80%;" />

整个MySQL Server由以下组成

- Connection Pool : 连接池组件
- Management Services & Utilities : 管理服务和工具组件
- SQL Interface : SQL接口组件
- Parser : 查询分析器组件
- Optimizer : 优化器组件
- Caches & Buffers : 缓冲池组件
- Pluggable Storage Engines : 存储引擎
- File System : 文件系统



1） 连接层

最上层是一些客户端和链接服务，包含本地sock 通信和大多数基于客户端/服务端工具实现的类似于 TCP/IP的通信。主要完成一些类似于连接处理、授权认证、及相关的安全方案。在该层上引入了线程池的概念，为通过认证安全接入的客户端提供线程。同样在该层上可以实现基于SSL的安全链接。服务器也会为安全接入的每个客户端验证它所具有的操作权限。

2） 服务层

第二层架构主要完成大多数的核心服务功能，如SQL接口，并完成缓存的查询，SQL的分析和优化，部分内置函数的执行。所有跨存储引擎的功能也在这一层实现，如 过程、函数等。在该层，服务器会解析查询并创建相应的内部解析树，并对其完成相应的优化如确定表的查询的顺序，是否利用索引等， 最后生成相应的执行操作。如果是select语句，服务器还会查询内部的缓存，如果缓存空间足够大，这样在解决大量读操作的环境中能够很好的提升系统的性能。

3） 引擎层

存储引擎层， 存储引擎真正的负责了MySQL中数据的存储和提取，服务器通过API和存储引擎进行通信。不同的存储引擎具有不同的功能，这样我们可以根据自己的需要，来选取合适的存储引擎。

4）存储层

数据存储层， 主要是将数据存储在文件系统之上，并完成与存储引擎的交互。



和其他数据库相比，MySQL有点与众不同，它的架构可以在多种不同场景中应用并发挥良好作用。主要体现在存储引擎上，插件式的存储引擎架构，将查询处理和其他的系统任务以及数据的存储提取分离。这种架构可以根据业务的需求和实际需要选择合适的存储引擎。



### 二、存储引擎

> 存储引擎就是**存储数据，建立索引，更新查询数据**等等技术的实现方式
>
> - 针对不同的存储需求可以选择最优的存储引擎。
> - 存储引擎是基于表的，每张表可以使用不同存储引擎



#### 1、MySql存储引擎

> MySQL提供了**插件式**的存储引擎架构。所以MySQL存在多种存储引擎，可以根据需要使用相应引擎，或者编写存储引擎
>
> MySQL5.0支持的存储引擎包含 ： InnoDB 、MyISAM 、BDB、MEMORY、MERGE、EXAMPLE、NDB Cluster、ARCHIVE、CSV、BLACKHOLE、FEDERATED等

```mysql
show engines;
```

<img src="C:\Users\admin\AppData\Roaming\Typora\typora-user-images\image-20201019220436964.png" alt="image-20201019220436964" style="zoom:80%;" />



#### 2、存储引擎特性

| 特点         | InnoDB               | MyISAM   | MEMORY | MERGE | NDB  |
| ------------ | -------------------- | -------- | ------ | ----- | ---- |
| 存储限制     | 64TB                 | 有       | 有     | 没有  | 有   |
| 事务安全     | ==支持==             |          |        |       |      |
| 锁机制       | ==行锁(适合高并发)== | ==表锁== | 表锁   | 表锁  | 行锁 |
| B树索引      | 支持                 | 支持     | 支持   | 支持  | 支持 |
| 哈希索引     |                      |          | 支持   |       |      |
| 全文索引     | 支持(5.6版本之后)    | 支持     |        |       |      |
| 集群索引     | 支持                 |          |        |       |      |
| 数据索引     | 支持                 |          | 支持   |       | 支持 |
| 索引缓存     | 支持                 | 支持     | 支持   | 支持  | 支持 |
| 数据可压缩   |                      | 支持     |        |       |      |
| 空间使用     | 高                   | 低       | N/A    | 低    | 低   |
| 内存使用     | 高                   | 低       | 中等   | 低    | 高   |
| 批量插入速度 | 低                   | 高       | 高     | 高    | 高   |
| 支持外键     | ==支持==             |          |        |       |      |



##### 2.1 InnoDB	

> InnoDB存储引擎是Mysql的默认存储引擎

> - InnoDB存储引擎提供了具有提交、回滚、崩溃恢复能力的**事务**安全
> - 支持外键约束
> - 行锁



###### 事务控制

> 在提交事务前，所有都会保存在事务日志中，事务日志得到commit命令才会同步到数据库中。

```mysql
create table goods_innodb(
	id int NOT NULL AUTO_INCREMENT,
	name varchar(20) NOT NULL,
    primary key(id)
)ENGINE=innodb DEFAULT CHARSET=utf8;

start transaction;
insert into goods_innodb(id,name)values(null,'Meta20');
commit;
```



###### 外键约束

> MySQL支持外键的存储引擎只有InnoDB 

```mysql
create table country_innodb(
	country_id int NOT NULL AUTO_INCREMENT,
    country_name varchar(100) NOT NULL,
    primary key(country_id)
)ENGINE=InnoDB DEFAULT CHARSET=utf8;


create table city_innodb(
	city_id int NOT NULL AUTO_INCREMENT,
    city_name varchar(50) NOT NULL,
    country_id int NOT NULL,
    primary key(city_id),
    key idx_fk_country_id(country_id),
    CONSTRAINT `fk_city_country` FOREIGN KEY(country_id) REFERENCES country_innodb(country_id) ON DELETE RESTRICT ON UPDATE CASCADE
)ENGINE=InnoDB DEFAULT CHARSET=utf8;

--  子表的外键指定是ON DELETE RESTRICT ON UPDATE CASCADE 方式的， 那么在主表删除记录的时候， 如果子表有对应记录， 则不允许删除， 主表在更新记录的时候， 如果子表有对应记录， 则子表对应更新 。
```

> 删除主表外键：delete from country_innodb where country_id = 1;(失败)

<img src="C:\Users\admin\AppData\Roaming\Typora\typora-user-images\image-20201019144848845.png" alt="image-20201019144848845" style="zoom:80%;" />

> 更新主表外键：update country_innodb set country_id = 100 where country_id = 1;(子表对应记录也会更新)



###### 存储方式

> - 使用**共享表空间**存储
>   - 表结构保存在**.frm**文件中
>   - 数据和索引保存在 innodb_data_home_dir 和 innodb_data_file_path定义的表空间中，可以是多个文件。
> - 使用**多表空间**存储
>   - 表结构存放 **.frm** 文件
>   - 每个表的数据和索引单独保存在 **.ibd** 中。

> cd /var/lib/mysql/

<img src="C:\Users\admin\AppData\Roaming\Typora\typora-user-images\image-20201019162402194.png" alt="image-20201019162402194" style="zoom:80%;" />





##### 2.2 MyISAM

> 不支持事务、也不支持外键，其优势是**访问速度快**
>
> 对事务的完整性没有要求或者以select、insert为主的应用基本上都可以使用这个引擎来创建表 

###### 不支持事务

<img src="C:\Users\admin\AppData\Roaming\Typora\typora-user-images\image-20201019224019740.png" alt="image-20201019224019740" style="zoom:80%;" />

<img src="C:\Users\admin\AppData\Roaming\Typora\typora-user-images\image-20201019224042393.png" alt="image-20201019224042393" style="zoom:80%;" />

###### 文件存储方式

> .frm (存储表定义)；
>
> .MYD(MYData , 存储数据)；
>
> .MYI(MYIndex , 存储索引)；

<img src="C:\Users\admin\AppData\Roaming\Typora\typora-user-images\image-20201019174007327.png" alt="image-20201019174007327" style="zoom:80%;" />



##### 2.3 Memory

> 每个MEMORY表实际对应一个**磁盘文件**，格式是.frm ，该文件中只存储表的结构
>
> **数据文件**，都是存储在内存中，这样有利于数据的快速处理，提高整个表的效率。
>
> 默认使用**hash索引** ， 但是服务一旦关闭，表中的数据就会丢失。



##### 2.4 Merge

> **MERGE存储引擎是一组MyISAM表的组合，这些MyISAM表结构必须完全相同**
>
> MERGE表本身并没有存储数据，对MERGE类型的表可以进行select、update、delete操作，这些操作实际上是对内部的MyISAM表进行的。

###### 2.4.1 插入

> 通过**insert method**子句定义插入的表
>
> - 使用**first或 last**值使得插入操作被相应地作用在第一或者最后一个表上
> - 不定义这个子句或者定义为**no**，表示不能对这个MERGE表执行插入操作

<img src="C:\Users\admin\AppData\Roaming\Typora\typora-user-images\1556076359503.png" style="zoom:80%;" />

```mysql
create table order_1990(
	order_id int ,
	order_money double(10,2),
	order_address varchar(50),
	primary key (order_id)
)engine = myisam default charset=utf8;


create table order_1991(
	order_id int ,
	order_money double(10,2),
	order_address varchar(50),
	primary key (order_id)
)engine = myisam default charset=utf8;


create table order_all(
	order_id int ,
	order_money double(10,2),
	order_address varchar(50),
	primary key (order_id)
    -- 插入选择最后一张表
)engine = merge union = (order_1990,order_1991) insert method=last --default charset=utf8;
```

```mysql
insert into order_1990 values(1,100.0,'北京');
insert into order_1990 values(2,100.0,'上海');

insert into order_1991 values(10,200.0,'北京');
insert into order_1991 values(11,200.0,'上海');
```

<img src="C:\Users\admin\AppData\Roaming\Typora\typora-user-images\image-20201019225024416.png" alt="image-20201019225024416" style="zoom:80%;" />

> 往order_all中插入一条记录 ，由于在MERGE表定义时，INSERT_METHOD 选择的是**last**，那么插入的数据会向最后一张表中插入。
>
> insert into order_all values(100,10000.0,'西安')；

<img src="C:\Users\admin\AppData\Roaming\Typora\typora-user-images\image-20201019225435071.png" alt="image-20201019225435071" style="zoom:80%;" />

###### 2.4.2 删除

> 这个操作只是**删除MERGE表的定义，对内部的表是没有任何影响的**。



#### 3、存储引擎的选择

- InnoDB 
  - 是Mysql的默认存储引擎，用于事务处理应用程序，支持外键。
  - 如果应用对事务的完整性有比较高的要求，在**并发条件下要求数据的一致性**，数据操作除了插入和查询以外，还包含很多的更新、删除操作，那么InnoDB存储引擎是比较合适的选择。
  - InnoDB存储引擎除了**有效的降低由于删除和更新导致的锁定**， 还可以**确保事务的完整提交和回滚**，对于类似于计费系统或者财务系统等对**数据准确性**要求比较高的系统，InnoDB是最合适的选择。
- MyISAM ： 如果应用是以读操作和插入操作为主，只有很少的更新和删除操作，并且对事务的完整性、并发性要求不是很高，那么选择这个存储引擎是非常合适的。
- MEMORY：将所有数据保存在RAM中，在需要快速定位记录和其他类似数据环境下，可以提供几块的访问。
  - MEMORY的缺陷就是对表的大小有限制，太大的表无法缓存在内存中
  - 其次是要确保表的数据可以恢复，**数据库异常终止后**表中的数据是可以恢复的。
  - MEMORY表通常用于**更新不太频繁的小表，用以快速得到访问结果。**
- MERGE：用于将一系列等同的MyISAM表以逻辑方式组合在一起，并作为一个对象引用他们。
  - MERGE表的优点在于可以突破对单个MyISAM表的大小限制，并且通过**将不同的表分布在多个磁盘上**，可以**有效的改善MERGE表的访问效率**。这对于存储诸如**数据仓储**等VLDB环境十分合适

